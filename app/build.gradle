apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs.kotlin"

ext {
    gdxVersion = '1.9.13'
}

configurations { natives }

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.innovattic.gdxarsample"
        minSdkVersion 19
        targetSdkVersion 30

        versionCode 3
        versionName "0.1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // ARCore dependency
    implementation "com.google.ar:core:1.22.0"

    // GDX
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    // Not supported by ARCore, but necessary for non-ar mode
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

    // GDX GLTF
    implementation "com.github.mgsx-dev.gdx-gltf:gltf:master-SNAPSHOT"

    // GDX-AR
    implementation project(path: ':gdxar')
}


// Takes the native dependencies of the natives configuration,
// and extracts them to the proper libs/ folders so they get packed with the APK.
// Run this task if `/src/main/jniLibs` does not exist,
// or the app crashes with: `Couldn't load shared library 'gdx'`
// This needs to be run in the consumer project of GDX-AR.
task copyAndroidNatives() {
    doFirst {

        file("src/main/jniLibs/armeabi-v7a/").mkdirs()
        file("src/main/jniLibs/arm64-v8a/").mkdirs()
        // Not supported by ARCore, but include them for consumers who may be ar optional
        file("src/main/jniLibs/armeabi/").mkdirs()
        file("src/main/jniLibs/x86/").mkdirs()
        file("src/main/jniLibs/x86_64/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("src/main/jniLibs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
            // Not supported by ARCore, but include them for consumers who may be ar optional
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("src/main/jniLibs/armeabi")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("src/main/jniLibs/x86_64")

            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}
